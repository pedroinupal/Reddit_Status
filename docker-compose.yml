services:
  db:
    image: postgres:alpine
    container_name: db_container
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: scraper_db
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - scraper_network
      - monitoring  # Agregado para monitoreo
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d scraper_db"]
      interval: 5s
      retries: 5
      timeout: 3s

  scraper:
    build: ./scraper
    container_name: scraper_container
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db_container
      DB_PORT: 5432
      DB_NAME: scraper_db
      DB_USER: user
      DB_PASSWORD: password
    networks:
      - scraper_network
      - monitoring  # Agregado para monitoreo
    command: sh -c "while true; do python /app/scraper.py; sleep 60; done"

  backend:
    build: ./backend
    container_name: backend_container
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db_container
      DB_PORT: 5432
      DB_NAME: scraper_db
      DB_USER: user
      DB_PASSWORD: password
    networks:
      - scraper_network
      - monitoring  # Agregado para monitoreo
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 120s
      retries: 3
      timeout: 3s
      start_period: 10s
  
  frontend:
    build: ./frontend
    container_name: frontend_container
    depends_on:
      backend:
        condition: service_healthy
    environment:
      REACT_APP_API_URL: "http://localhost:8000"  # Backend url
    networks:
      - scraper_network
      - monitoring  # Agregado para monitoreo
    ports:
      - "3000:3000"

  # Servicio Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  # Servicio Grafana
  grafana:
    image: grafana/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin  # or Viewer if you want read-only access
      - GF_AUTH_DISABLE_LOGIN_FORM=true   # Optional: completely removes the login form
    container_name: grafana
    ports:
      - "3030:3000"
    depends_on:
      - prometheus
    volumes:
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    networks:
      - monitoring

  # Servicio cAdvisor para métricas de contenedores
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    command:
      - '--docker_only=true'
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    ports:
      - "8080:8080"
  
    volumes:
    - /:/rootfs:ro
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro

    networks:
      - monitoring

  # Servicio Node Exporter para métricas del host
  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - monitoring

volumes:
  db_data:

networks:
  scraper_network:
  monitoring:  # Nueva red para monitoreo

